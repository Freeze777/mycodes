import java.io.*;
import java.math.*;
import java.util.*;

public class run {
	static class SegmentTree {

		public int[] createTree(int input[], Operation operation) {
			int height = (int) Math.ceil(Math.log(input.length) / Math.log(2));
			int segmentTree[] = new int[(int) (Math.pow(2, height + 1) - 1)];
			constructTree(segmentTree, input, 0, input.length - 1, 0, operation);
			return segmentTree;
		}

		private void constructTree(int segmentTree[], int input[], int low,
				int high, int pos, Operation operation) {
			if (low == high) {
				segmentTree[pos] = input[low];
				return;
			}
			int mid = (low + high) / 2;
			constructTree(segmentTree, input, low, mid, 2 * pos + 1, operation);
			constructTree(segmentTree, input, mid + 1, high, 2 * pos + 2,
					operation);
			segmentTree[pos] = operation.perform(segmentTree[2 * pos + 1],
					segmentTree[2 * pos + 2]);
		}

		public int rangeQuery(int[] segmentTree, int qlow, int qhigh, int len,
				Operation operation) {
			return rangeQuery(segmentTree, 0, len - 1, qlow, qhigh, 0,
					operation);
		}

		private int rangeQuery(int segmentTree[], int low, int high, int qlow,
				int qhigh, int pos, Operation operation) {
			if (qlow <= low && qhigh >= high) {
				return segmentTree[pos];
			}
			if (qlow > high || qhigh < low) {
				return 0;
			}
			int mid = (low + high) / 2;
			return operation.perform(
					rangeQuery(segmentTree, low, mid, qlow, qhigh, 2 * pos + 1,
							operation),
					rangeQuery(segmentTree, mid + 1, high, qlow, qhigh,
							2 * pos + 2, operation));
		}

		public void updateValueForSumOperation(int input[], int segmentTree[],
				int newVal, int index) {
			int diff = newVal - input[index];
			input[index] = newVal;
			updateVal(segmentTree, 0, input.length - 1, diff, index, 0);
		}

		private void updateVal(int segmentTree[], int low, int high, int diff,
				int index, int pos) {
			if (index < low || index > high) {
				return;
			}
			segmentTree[pos] += diff;
			if (low >= high) {
				return;
			}
			int mid = (low + high) / 2;
			updateVal(segmentTree, low, mid, diff, index, 2 * pos + 1);
			updateVal(segmentTree, mid + 1, high, diff, index, 2 * pos + 2);
		}
	}

	static interface Operation {
		int perform(int a, int b);
	}

	static class SumOperation implements Operation {

		@Override
		public int perform(int a, int b) {
			return a + b;
		}
	}

	static class MinOperation implements Operation {
		@Override
		public int perform(int a, int b) {
			return Math.min(a, b);
		}
	}

	private static void solve(FastScanner sc, PrintWriter out) {
		int n=sc.nextInt();
		int q=sc.nextInt();
		int arr[] = new int[n];
		SegmentTree st = new SegmentTree();
		Operation sumOp = new SumOperation();
		st.createTree(arr, sumOp);
		
		
		System.out.println();
		

	
	}

	public static void main(String[] args) throws IOException {
		FastScanner in = new FastScanner(System.in);
		PrintWriter out = new PrintWriter(new BufferedWriter(
				new OutputStreamWriter(System.out)), false);
		solve(in, out);
		in.close();
		out.close();
	}

	static class FastScanner {
		BufferedReader reader;
		StringTokenizer st;

		FastScanner(InputStream stream) {
			reader = new BufferedReader(new InputStreamReader(stream));
			st = null;
		}

		String next() {
			while (st == null || !st.hasMoreTokens()) {
				try {
					String line = reader.readLine();
					if (line == null) {
						return null;
					}
					st = new StringTokenizer(line);
				} catch (Exception e) {
					throw new RuntimeException();
				}
			}
			return st.nextToken();
		}

		String nextLine() {
			String s = null;
			try {
				s = reader.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return s;
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		char nextChar() {
			return next().charAt(0);
		}

		int[] nextIntArray(int n) {
			int[] arr = new int[n];
			int i = 0;
			while (i < n) {
				arr[i++] = nextInt();
			}
			return arr;
		}

		long[] nextLongArray(int n) {
			long[] arr = new long[n];
			int i = 0;
			while (i < n) {
				arr[i++] = nextLong();
			}
			return arr;
		}

		int[] nextIntArrayOneBased(int n) {
			int[] arr = new int[n + 1];
			int i = 1;
			while (i <= n) {
				arr[i++] = nextInt();
			}
			return arr;
		}

		long[] nextLongArrayOneBased(int n) {
			long[] arr = new long[n + 1];
			int i = 1;
			while (i <= n) {
				arr[i++] = nextLong();
			}
			return arr;
		}

		void close() {
			try {
				reader.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

}
