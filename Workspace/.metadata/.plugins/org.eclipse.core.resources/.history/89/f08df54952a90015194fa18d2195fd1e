package algo.trees;

public class DiameterOfATree {
	 static int diameter=0;
	public static void main(String[] args) {
		Node root = new Node(5);

		root.left = new Node(10);
		root.left.left = new Node(1);
		root.left.right = new Node(17);
		root.left.left.left = new Node(1);
		root.left.left.right = new Node(2);

		root.right = new Node(7);
		root.right.left = new Node(8);
		root.right.right = new Node(1);
		root.right.left.left = new Node(3);
		root.right.left.right = new Node(-10);
		System.out.println(modifiedHeight(root));
		System.out.println(diameter);
		}
		
		//O(n^2) algorithm
	public static int diameter(Node root) {
		if(root==null)
			return 0;
		
		int leftHeight=TreeUtility.height(root.left);
		int rightHeight=TreeUtility.height(root.right);
		
		
		return (Math.max(1+leftHeight+rightHeight,Math.max(diameter(root.right),diameter(root.left))));
	}
	//O(n) algorithm
	public static int modifiedHeight(Node root) {
		if(root==null)
			return 0;
		
		int leftHeight=modifiedHeight(root.left);
		int rightHeight=modifiedHeight(root.right);
		int d=leftHeight+rightHeight+1;
		if(d>diameter)diameter=d;
		
		return (1+Math.max(leftHeight,rightHeight));
	}


}
