import java.io.*;
import java.math.*;
import java.util.*;

public class run {
	static class SegmentTree {

		public List<Map<Integer, Integer>> createTree(int input[],
				Operation operation) {
			int height = (int) Math.ceil(Math.log(input.length) / Math.log(2));
			int size = (int) (Math.pow(2, height + 1) - 1);
			List<Map<Integer, Integer>> segmentTree = new ArrayList<Map<Integer, Integer>>(
					size);
			for (int i = 0; i < size; i++)
				segmentTree.add(new HashMap<Integer, Integer>());
			constructTree(segmentTree, input, 0, input.length - 1, 0, operation);
			return segmentTree;
		}

		private void constructTree(List<Map<Integer, Integer>> segmentTree,
				int input[], int low, int high, int pos, Operation operation) {
			if (low == high) {
				segmentTree.get(pos).put(input[low], 1);
				return;
			}
			int mid = (low + high) / 2;
			constructTree(segmentTree, input, low, mid, 2 * pos + 1, operation);
			constructTree(segmentTree, input, mid + 1, high, 2 * pos + 2,
					operation);
			int left = pos >> 1 + 1;
			int right = pos >> 1 + 2;
			Map<Integer, Integer> combined = operation.perform(
					segmentTree.get(left), segmentTree.get(right));
			segmentTree.set(pos, combined);
		}

		public int rangeQuery(int[] segmentTree, int qlow, int qhigh, int len,
				Operation operation) {
			return rangeQuery(segmentTree, 0, len - 1, qlow, qhigh, 0,
					operation);
		}

		private int rangeQuery(int segmentTree[], int low, int high, int qlow,
				int qhigh, int pos, Operation operation) {
			if (qlow <= low && qhigh >= high) {
				return segmentTree[pos];
			}
			if (qlow > high || qhigh < low) {
				return 0;
			}
			int mid = (low + high) / 2;
			return operation.perform(
					rangeQuery(segmentTree, low, mid, qlow, qhigh, 2 * pos + 1,
							operation),
					rangeQuery(segmentTree, mid + 1, high, qlow, qhigh,
							2 * pos + 2, operation));
		}

		public void updateValueForSumOperation(int input[], int segmentTree[],
				int newVal, int index) {
			int diff = newVal - input[index];
			input[index] = newVal;
			updateVal(segmentTree, 0, input.length - 1, diff, index, 0);
		}

		private void updateVal(int segmentTree[], int low, int high, int diff,
				int index, int pos) {
			if (index < low || index > high) {
				return;
			}
			segmentTree[pos] += diff;
			if (low >= high) {
				return;
			}
			int mid = (low + high) / 2;
			updateVal(segmentTree, low, mid, diff, index, 2 * pos + 1);
			updateVal(segmentTree, mid + 1, high, diff, index, 2 * pos + 2);
		}
	}

	static interface Operation {
		Map<Integer, Integer> perform(Map<Integer, Integer> map1,
				Map<Integer, Integer> map2);

	}

	static class Combine implements Operation {

		@Override
		public Map<Integer, Integer> perform(Map<Integer, Integer> map1,
				Map<Integer, Integer> map2) {
			Map<Integer, Integer> retMap = new HashMap<Integer, Integer>();
			for (Map.Entry<Integer, Integer> entry : map1.entrySet()) {
				int key = entry.getKey();
				int value = entry.getValue();
				int old_val = 0;
				if (retMap.containsKey(key)) {
					old_val = retMap.get(key);

				}
				retMap.put(key, old_val + value);
			}
			for (Map.Entry<Integer, Integer> entry : map2.entrySet()) {
				int key = entry.getKey();
				int value = entry.getValue();
				int old_val = 0;
				if (retMap.containsKey(key)) {
					old_val = retMap.get(key);

				}
				retMap.put(key, old_val + value);
			}
			return retMap;
		}

	}

	private static void solve(FastScanner sc, PrintWriter out) {
		/*
		 * int n=sc.nextInt(); int q=sc.nextInt();
		 */
		// int arr[] = new int[n];
		int[] arr = { 3, 7, 8, 2 };
		SegmentTree st = new SegmentTree();
		Operation combiner = new Combine();
		List<Map<Integer, Integer>> segmentTree = st.createTree(arr, combiner);
		System.out.println(st.rangeQuery(segmentTree, 0, 3, 4, combiner));
		st.updateValueForSumOperation(arr, segmentTree, 100, 0);
		System.out.println(st.rangeQuery(segmentTree, 0, 3, 4, sumOp));

		System.out.println();

	}

	public static void main(String[] args) throws IOException {
		FastScanner in = new FastScanner(System.in);
		PrintWriter out = new PrintWriter(new BufferedWriter(
				new OutputStreamWriter(System.out)), false);
		solve(in, out);
		in.close();
		out.close();
	}

	static class FastScanner {
		BufferedReader reader;
		StringTokenizer st;

		FastScanner(InputStream stream) {
			reader = new BufferedReader(new InputStreamReader(stream));
			st = null;
		}

		String next() {
			while (st == null || !st.hasMoreTokens()) {
				try {
					String line = reader.readLine();
					if (line == null) {
						return null;
					}
					st = new StringTokenizer(line);
				} catch (Exception e) {
					throw new RuntimeException();
				}
			}
			return st.nextToken();
		}

		String nextLine() {
			String s = null;
			try {
				s = reader.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return s;
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		char nextChar() {
			return next().charAt(0);
		}

		int[] nextIntArray(int n) {
			int[] arr = new int[n];
			int i = 0;
			while (i < n) {
				arr[i++] = nextInt();
			}
			return arr;
		}

		long[] nextLongArray(int n) {
			long[] arr = new long[n];
			int i = 0;
			while (i < n) {
				arr[i++] = nextLong();
			}
			return arr;
		}

		int[] nextIntArrayOneBased(int n) {
			int[] arr = new int[n + 1];
			int i = 1;
			while (i <= n) {
				arr[i++] = nextInt();
			}
			return arr;
		}

		long[] nextLongArrayOneBased(int n) {
			long[] arr = new long[n + 1];
			int i = 1;
			while (i <= n) {
				arr[i++] = nextLong();
			}
			return arr;
		}

		void close() {
			try {
				reader.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

}
