import java.io.*;
import java.util.ArrayList;
import java.util.List;

import algo.Utils;

class Solution {
	public static boolean dfs(char[][] board, String word, int i, int j, int k) {
		int m = board.length;
		int n = board[0].length;

		if (i < 0 || j < 0 || i >= m || j >= n) {
			return false;
		}

		if (board[i][j] == word.charAt(k)) {
			char temp = board[i][j];
			board[i][j] = '#';
			if (k == word.length() - 1) {
				return true;
			} else if (dfs(board, word, i - 1, j, k + 1)
					|| dfs(board, word, i + 1, j, k + 1)
					|| dfs(board, word, i, j - 1, k + 1)
					|| dfs(board, word, i, j + 1, k + 1)
					|| dfs(board, word, i - 1, j + 1, k + 1)
					|| dfs(board, word, i + 1, j + 1, k + 1)
					|| dfs(board, word, i + 1, j - 1, k + 1)
					|| dfs(board, word, i - 1, j - 1, k + 1)) {
				return true;
			}
			board[i][j] = temp;
		}

		return false;
	}

	public static void main(String[] args) throws IOException {
		int rows, cols;
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		rows = Integer.parseInt(br.readLine());
		cols = Integer.parseInt(br.readLine());
		char[][] grid = new char[rows][cols];
		for (int i = 0; i < rows; i++) {
			grid[i] = br.readLine().toCharArray();
		}
		int no = Integer.parseInt(br.readLine());
		String[] strings = new String[no];
		for (int i = 0; i < no; i++) {
			strings[i] = br.readLine();
		}
		for (int c = 0; c < no; c++) {
			System.out.println(findWordInAGrid(grid, rows, cols, strings[c]));
		}
	}

	// you may add more methods here

	public static Boolean findWordInAGrid(char[][] grid, int rows, int cols,
			String word) {
		
		int m = grid.length;
		int n = grid[0].length;
		char board[][]=new char[m][n];
		boolean result = false;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {

				if (dfs(board, word, i, j, 0)) {
					result = true;
				}
			}
		}

		return result;
	}
}
