import java.io.*;
import java.util.*;

public class run {
	static long m = 1000000007;

	public static void main(String args[]) throws Exception {

		InputReader in = new InputReader(System.in);
		PrintWriter w = new PrintWriter(System.out);
		int t = in.nextInt();
		while (t-- > 0) {

			int n = in.nextInt();
			int a = in.nextInt();

			long fibSum = fib(a, m);
	        long fibSumPos = fib(a + 1, m);

	        long ans = fibSumPos;

	        for (int i = 1; i < n; i++) {
	            int x = in.nextInt();
	            long f = fib(x, m);
	            long fplus = fib(x + 1, m);
	            long fneg = fib(x - 1, m);
	            
	            long fibSumNew = fibSumPos * f + fibSum * fneg;
	            long fibSumPosNew = fibSumPos * fplus + fibSum * f;
	            
	            fibSum = (fibSumNew + f) % m;
	            fibSumPos = (fibSumPosNew + fplus) % m;
	            
	            ans += fibSumPos;
	            ans %= m;
	        }

	        ans *= 2;
	        ans -= n * 1L * (n - 1) / 2;
	        ans %= m;
	        ans += m;
	        ans %= m;
			w.println(ans);
		}
		w.close();
	}

	static long fib(long n, long m) {
		long F[][] = { { 1, 1 }, { 1, 0 } };
		if (n == 0)
			return 0;
		power1(F, n - 1, m);
		return F[0][0] % m;
	}

	/* Optimized version of power() in method 4 */
	static void power1(long F[][], long n, long m) {
		if (n == 0 || n == 1)
			return;
		long M[][] = { { 1, 1 }, { 1, 0 } };

		power1(F, n >> 1, m);
		multiply(F, F, m);

		if ((n & 1) != 0)
			multiply(F, M, m);
	}

	static void multiply(long F[][], long M[][], long m) {
		long x = ((F[0][0] * M[0][0]) + (F[0][1] * M[1][0]));
		long y = ((F[0][0] * M[0][1]) + (F[0][1] * M[1][1]));
		long z = ((F[1][0] * M[0][0]) + (F[1][1] * M[1][0]));
		long w = ((F[1][0] * M[0][1]) + (F[1][1] * M[1][1]));
		x %= m;
		y %= m;
		z %= m;
		w %= m;
		F[0][0] = x;
		F[0][1] = y;
		F[1][0] = z;
		F[1][1] = w;
	}

	static class InputReader {

		private InputStream stream;
		private byte[] buf = new byte[1024];
		private int curChar;
		private int numChars;
		private SpaceCharFilter filter;

		public InputReader(InputStream stream) {
			this.stream = stream;
		}

		public int snext() {
			if (numChars == -1)
				throw new InputMismatchException();
			if (curChar >= numChars) {
				curChar = 0;
				try {
					numChars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (numChars <= 0)
					return -1;
			}
			return buf[curChar++];
		}

		public int nextInt() {
			int c = snext();
			while (isSpaceChar(c))
				c = snext();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = snext();
			}

			int res = 0;

			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = snext();
			} while (!isSpaceChar(c));

			return res * sgn;
		}

		public boolean isSpaceChar(int c) {
			if (filter != null)
				return filter.isSpaceChar(c);
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}

		public interface SpaceCharFilter {
			public boolean isSpaceChar(int ch);
		}
	}
}
