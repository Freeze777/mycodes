package algo.trees;

import java.util.HashMap;

public class VerticalSum {
	public static void main(String[] args) {
		Node root = new Node(5);

		root.left = new Node(10);
		root.left.left = new Node(1);
		root.left.right = new Node(17);
		root.left.left.left = new Node(1);
		root.left.left.right = new Node(2);

		root.right = new Node(7);
		root.right.left = new Node(8);
		root.right.right = new Node(1);
		root.right.left.left = new Node(3);
		root.right.left.right = new Node(-10);

		HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();

		findVerticalSum(root, 0, map);
	}

	public static void findVerticalSum(Node root, int verticalIndex,
			HashMap<Integer, Integer> map) {
		if (root == null)
			return;
		int prevSum=(map.get(verticalIndex) == null) ? 0:( map.get(verticalIndex) + 1);
		map.put(verticalIndex,root.data+prevSum);
		findVerticalSum(root.left, verticalIndex - 1, map);
		findVerticalSum(root.right, verticalIndex + 1, map);

	}
}
