package algo.trie;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;

class Data {
	public long id;
	public double price;
	public String category;

	public Data(long id, double price, String category) {
		this.price = price;
		this.id = id;
		this.category = category;
	}

	@Override
	public String toString() {
		return "Data [price=" + price + ", id=" + id + ", category=" + category
				+ "]";
	}

}

public class CatalogUsingTrie {
	private static class TrieNode {
		Map<Character, TrieNode> children;
		boolean isEnd;
		Data data;

		public TrieNode() {
			children = new TreeMap<Character, TrieNode>();
			isEnd = false;
		}
	}

	private static class Trie {
		private TrieNode root;

		public Trie() {
			root = new TrieNode();
		}

		public void insert(String word, Data data) {
			TrieNode crawl = root;
			for (int i = 0; i < word.length(); i++) {
				if (!crawl.children.containsKey(word.charAt(i)))
					crawl.children.put(word.charAt(i), new TrieNode());
				crawl = crawl.children.get(word.charAt(i));
			}
			crawl.isEnd = true;
			crawl.data = data;
		}

		public Data search(String word) {
			TrieNode crawl = root;
			for (int i = 0; i < word.length(); i++) {
				if (!crawl.children.containsKey(word.charAt(i)))
					return null;
				crawl = crawl.children.get(word.charAt(i));
			}
			return crawl.isEnd ? crawl.data : null;
		}

		public void dfs(TrieNode root) {
			if (root == null)
				return;
			if (root.children.size() == 0)
				return;
			for (TrieNode node : root.children.values()) {
				dfs(node);
			}
		}

		public boolean startsWith(String prefix) {
			TrieNode crawl = root;
			for (int i = 0; i < prefix.length(); i++) {
				if (!crawl.children.containsKey(prefix.charAt(i)))
					return false;
				crawl = crawl.children.get(prefix.charAt(i));
			}
			return true;
		}
	}

	public static void main(String[] args) {
		Trie trie = new Trie();
		try {
			Scanner sc = new Scanner(new File("product.csv"));
			while (sc.hasNextLine()) {
				String[] input = sc.nextLine().split(",");
				Data data = new Data(Long.parseLong(input[0]),
						Double.parseDouble(input[2]), input[3]);
				trie.insert(input[1], data);

			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
}
