package algo.list;

import java.util.Comparator;
import java.util.PriorityQueue;


class NodeComparator implements Comparator<ListNode>{
    @Override
    public int compare(ListNode n1,ListNode n2){
        
        return n1.data-n2.data;
    }
}
public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length==0)
            return null;
        PriorityQueue<ListNode> minHeap=new PriorityQueue<ListNode>(new NodeComparator());
        for(int i=0;i<lists.length;i++){
            if(lists[i]!=null)
                minHeap.add(lists[i]);
        }
        ListNode head=minHeap.remove();
        if(head.next!=null)
            minHeap.add(head.next);
        ListNode it=head;
        while(!minHeap.isEmpty()){
            ListNode node=minHeap.remove();
            it.next=node;
            if(node.next!=null)
                minHeap.add(node.next);
            it=it.next;
        }
        
        return head;
    }
}