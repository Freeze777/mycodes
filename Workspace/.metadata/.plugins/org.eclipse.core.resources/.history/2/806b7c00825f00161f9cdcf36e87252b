package algo.dp;

public class FindQuadruples {
	/*
	 * Given a number “S”, find out how many number of ways a, b, c, d (all > 1)
	 * can exist such that a+b+c+d = S;
	 */
	public static void main(String[] args) {
		int s = 55;
		System.out.println(getCountAllAbove1(s));
		System.out.println(getCountIncreasingQuadruples(s));
	}

	private static long getCountIncreasingQuadruples(int s) {
		long count = 0;
		for (int a = 1; a <= s; a++) {
			for (int b = a; b <= s; b++) {
				for (int c = b; c <= s; c++) {
					int d = s - a - b - c;
					if (d >= c) {
						System.out.println(a + " " + b + " " + c + " " + d);
						count++;
					}
				}
			}
		}
		return count;
	}

	private static long getCountIncreasingQuadruplesDP(int s) {
		long[][] dp = new long[s + 1][5];
		for (int i = 0; i < dp.length; i++) {
			dp[i][1] = 1;
		}
		for (int n = 1; n <= s; n++) {
			for (int k = 2; k <= 4; k++) {
				dp[n][k]=dp[n-k][k]+dp[n-1][k-1];
			}
		}
		return dp[s][4];
	}

	private static long getCountAllAbove1(int s) {
		long count = 0;
		for (int a = 2; a <= s; a++) {
			for (int b = 2; b <= s; b++) {
				for (int c = 2; c <= s; c++) {
					int d = s - a - b - c;
					if (d > 1) {
						// System.out.println(a+" "+b+" "+c+" "+d);
						count++;
					}
				}
			}
		}

		return count;
	}
}
