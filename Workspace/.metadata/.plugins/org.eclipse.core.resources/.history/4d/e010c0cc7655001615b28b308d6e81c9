package algo.tree;

import java.util.LinkedList;
import java.util.Queue;

public class BSTIterator {
    Queue<Integer> q;
    
    private void inorder(TreeNode root,Queue<Integer> q){
        if(root==null)
            return;
        inorder(root.left,q);
        q.add(root.val);
        inorder(root.right,q);
    }
    
    public BSTIterator(TreeNode root) {
        q=new LinkedList<Integer>();
        inorder(root,q);
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return !q.isEmpty();
    }

    /** @return the next smallest number */
    public int next() {
        return q.remove();
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */