package algo.trees;

public class NumberOfBSTOfNkeys {
	// bottom-up
	public static int countBST_method1(int n) {
		if (n == 0 || n == 1)
			return 1;
		int[] dp = new int[n + 1];
		dp[0] = dp[1] = 1;
		// bottom-up
		for (int i = 2; i < dp.length; i++) {
			for (int j = 1; j <= i; j++) {
				dp[i] += (dp[i - j] * dp[j - 1]);
			}
		}
		return dp[n];
	}

	public static int countBST_method2(int n, int[] dp) {
		if (dp[n] != 0)
			return dp[n];
		for (int root = 1; root <=n; root++) 
			dp[n]+=(countBST_method2(n-root,dp)+countBST_method2(root-1,dp));
		return dp[n];
	}

	public static int countBST_method2(int n) {
		int[] dp = new int[n + 1];
		dp[0]=dp[1]=1;
		return countBST_method2(n, dp);
	}

	public static void main(String[] args) {

	}
}
