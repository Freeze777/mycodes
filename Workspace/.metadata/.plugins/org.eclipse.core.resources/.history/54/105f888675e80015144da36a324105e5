import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Scanner;

import algo.graph.GraphUtility;

class GNode {

	int pno;
	int h;
}

public class BFS {

	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int m = n - 1;
		int q = sc.nextInt();
		GNode[] platform = new GNode[n];
		for (int i = 0; i < platform.length; i++) {
			platform[i] = new GNode();
			platform[i].pno = i + 1;
			platform[i].h = sc.nextInt();
		}

		Map<GNode, List<GNode>> adjList = new HashMap<GNode, List<GNode>>();
		for (int i = 0; i < m; i++) {
			int x = sc.nextInt();
			int y = sc.nextInt();

			if (adjList.containsKey(platform[x - 1])) {
				adjList.get(platform[x - 1]).add(platform[y - 1]);
			} else {
				ArrayList<GNode> xList = new ArrayList<GNode>();
				xList.add(platform[y - 1]);
				adjList.put(platform[x - 1], xList);
			}

		}
		for (int i = 0; i < q; i++) {
			int cap = sc.nextInt();

			GNode curr = platform[0];

			while (true) {
				GNode prev = curr;
				List<GNode> xList = adjList.get(curr);
				for (GNode gNode : xList) {
					if (gNode.h <= cap)
						curr = gNode;
				}
				if(prev==curr)
					break;

			}

		}

	}

	public static void breadthFirstSearch(int s,
			Map<Integer, List<Integer>> adjList, int edgeLength, int n) {
		Map<Integer, Integer> discovered = new HashMap<Integer, Integer>();
		Map<Integer, Integer> parent = new HashMap<Integer, Integer>();
		Queue<Integer> bfsQ = new LinkedList<Integer>();

		int level = 1;

		bfsQ.add(s);
		bfsQ.add(null);

		discovered.put(s, 0);
		parent.put(s, null);

		while (!bfsQ.isEmpty()) {
			Integer current = bfsQ.remove();

			if (current != null) {
				List<Integer> currList = adjList.get(current);
				if (currList != null) {
					for (Integer adjVertex : currList) {
						if (!discovered.containsKey(adjVertex)) {
							bfsQ.add(adjVertex);
							discovered.put(adjVertex, (level * edgeLength));
							parent.put(adjVertex, current);
						}
					}
				}
			} else {
				if (bfsQ.isEmpty())
					break;
				level++;
				bfsQ.add(null);// end of a level
			}

		}

		System.out.println(parent);
		System.out.println(discovered);

	}
}