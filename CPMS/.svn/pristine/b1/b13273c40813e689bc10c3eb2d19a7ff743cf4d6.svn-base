package centurylink.cpms;

import java.nio.channels.SeekableByteChannel;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.hibernate.*;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;

public class HibernateOps {

	/* Method to CREATE an cpms_user in the database */
	public void addCpmsUser(User user, SessionFactory factory) {
		System.out.println("HibernateOps-addCmpsUser");
		Session session = factory.openSession();
		Transaction tx = null;

		try {
			tx = session.beginTransaction();
			CpmsUser cpms_user = new CpmsUser(user);

			user.setCid((Long)session.save(cpms_user));
			tx.commit();
		} catch (HibernateException e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}

		System.out.println("inserted successfully");

	}

	public String selectCpmsUser(User user, SessionFactory factory) {
		// TODO Auto-generated method stub
		System.out.println("HibernateOPs-selectCpmsuser");
		Session session = factory.openSession();
		Transaction tx = null;
		String cuid =user.getCuid().trim();
		int password = user.getPassword().trim().hashCode();
		CpmsUser cpmsuser = null;
		try {
			//System.out.println("in try"+cuid+password);

			tx = session.beginTransaction();
			// List cpmsusers =
			// session.createQuery("FROM cpms_user where cuid=:cuid and password=:password").list();
			Query query = session.createQuery("FROM CpmsUser WHERE cuid=:cuid");
			System.out.println(query);
			query.setParameter("cuid", cuid);
			cpmsuser = (CpmsUser) query.uniqueResult();
			System.out.println(cpmsuser);

			if (cpmsuser != null) {
				if(cpmsuser.getPassword()==password)
				{	user.setCid(cpmsuser.getCid());
				return cpmsuser.getName();
				}
			}
			/*
			 * for (Iterator iterator =cpmsusers.iterator();
			 * iterator.hasNext();){ cpmsuser = (CpmsUser) iterator.next(); if(
			 * (cpmsuser.getCuid()==Integer.parseInt(user.getCuid().trim()))&&
			 * (cpmsuser.getPassword()==user.getPassword().trim().hashCode())) {
			 * return cpmsuser.getName(); }
			 *//*
			 * System.out.print("First Name: " + employee.getFirstName());
			 * System.out.print("  Last Name: " + employee.getLastName());
			 * System.out.println("  Salary: " + employee.getSalary());
			 */
			// }
			tx.commit();
		} catch (HibernateException e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}

		return null;

	}

	public void addCpmsRoutes(Routes routes, SessionFactory factory,long cid) {
		// TODO Auto-generated method stub
		System.out.println("HibernateOps-addCmpsRoutes");
		Session session = factory.openSession();
		Transaction tx = null;

		System.out.println(routes);

		try {

			tx = session.beginTransaction();
			CpmsRoutes cpmsRouteTo = new CpmsRoutes(cid, routes.getToSource(), routes.getToDestination(), 1, Integer.parseInt(routes.getToOfficeStartTime()), Integer.parseInt(routes.getToOfficeEndTime()), 0);
			CpmsRoutes cpmsRouteAway = new CpmsRoutes(cid, routes.getFromSource(), routes.getFromDestination(), 1, Integer.parseInt(routes.getFromOfficeStartTime()), Integer.parseInt(routes.getFromOfficeEndTime()), 1);
			routes.setToRouteId((Long)session.save(cpmsRouteTo));

			routes.setFromRouteId((Long)session.save(cpmsRouteAway));

			tx.commit();
		} catch (HibernateException e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}

		System.out.println("route inserted successfully");

	}



	public void addCpmsTransits(long toRouteId, long fromRouteId, Long cid,
			String[] toTrasitsArray, int toLength, String[] fromTrasitsArray,
			int fromLength, SessionFactory factory) {
		// TODO Auto-generated method stub
		System.out.println("HibernateOps-addCmpsTransits");
		Session session = factory.openSession();
		Transaction tx = null;

		try {

			tx = session.beginTransaction();
			for(int i =0; i<toLength; i++)
			{
				CpmsTransits cpmsTransitTo = new CpmsTransits(cid, toRouteId, toTrasitsArray[i],0);
				session.save(cpmsTransitTo);
			}

			for(int i =0; i<fromLength; i++)
			{
				CpmsTransits cpmsTransitFrom = new CpmsTransits(cid, fromRouteId, fromTrasitsArray[i],1);
				session.save(cpmsTransitFrom);
			}
			tx.commit();
		} catch (HibernateException e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}

		System.out.println("Trasits inserted successfully");


	}

	public ArrayList<String> fillCpmsTransitList( SessionFactory factory) {
		// TODO Auto-generated method stub
		System.out.println("HibernateOPs-fillCpmsTransits");
		Session session = factory.openSession();
		Transaction tx = null;
		ArrayList<String> list = null;
		//		ICriteria c = session.CreateCriteria(typeof(Tribble));
		//		c.SetProjection(Projections.ProjectionList().Add(Projections.Property("Name")));
		//		IList<string> names = c.List<string>();

		try {
			tx = session.beginTransaction();
			Criteria cr = (Criteria)session.createCriteria(CpmsTransits.class);
			//cr.add(Restrictions.eq("type", 0));
			cr.setProjection(Projections.distinct(Projections.projectionList().add(Projections.property("transit"))));
			list = (ArrayList<String>) cr.list();
			tx.commit();
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}
		System.out.println(list);
		return list;
	}

	public ArrayList<SearchArray> searchCpmsRoutes(String to,String from,int time,SessionFactory factory)
	{
		System.out.println("HibernateOPs-fillCpmsTransits");
		Session session = factory.openSession();
		Transaction tx = null;
		ArrayList<Integer> routeList = new ArrayList<Integer>();
		ArrayList<SearchArray> searchArrayList = new ArrayList<SearchArray>();
		SearchArray searchArrayObj = new SearchArray();
		//		ICriteria c = session.CreateCriteria(typeof(Tribble));
		//		c.SetProjection(Projections.ProjectionList().Add(Projections.Property("Name")));
		//		IList<string> names = c.List<string>();

		try {
			tx = session.beginTransaction();
			Criteria cr = (Criteria)session.createCriteria(CpmsTransits.class);
			if(to.equals("CTLI"))
			{
				cr.add(Restrictions.eq("type", 0)).add(Restrictions.like("transit",from));
				cr.setProjection(Projections.distinct(Projections.projectionList().add(Projections.property("routeid"))));
				routeList = (ArrayList<Integer>) cr.list();
			}

			else if(from.equals("CTLI"))
			{
				cr.add(Restrictions.eq("type", 1)).add(Restrictions.like("transit",to));
				cr.setProjection(Projections.distinct(Projections.projectionList().add(Projections.property("routeid"))));
				routeList = (ArrayList<Integer>) cr.list();
			}

			Criteria crRoutes = (Criteria)session.createCriteria(CpmsRoutes.class);
		
			crRoutes.add(Restrictions.in("routeid", routeList)).add(Restrictions.between("sourcetime",(time-2000),time));
			
			ArrayList<CpmsRoutes> routesArray = (ArrayList<CpmsRoutes>)crRoutes.list();
			//ArrayList<String> stringList = (ArrayList<String>)cr.list();
			//String stringRow = (String)stringList.get(0);
			//System.out.println(stringRow);
			//	System.out.println(routesArray);
			//System.out.println((cr.list().get(0)));
			int numberOfRoutes = routesArray.size();

			for (int i=0;i<numberOfRoutes;i++) 
			{
				CpmsRoutes cpmsRoutes =  routesArray.get(i);
				searchArrayObj.setSource(cpmsRoutes.getSource());
				searchArrayObj.setDestination(cpmsRoutes.getDestination());
				searchArrayObj.setStartTime(((Integer)cpmsRoutes.getSourcetime()).toString());
				searchArrayObj.setRouteid(cpmsRoutes.getRouteid());
				CpmsUser cpmsUser = (CpmsUser) session.get(CpmsUser.class, cpmsRoutes.getCid());
				Criteria crSeats = (Criteria)session.createCriteria(CpmsSeats.class);
				crSeats.add(Restrictions.eq("routeid",cpmsRoutes.getRouteid()));
				crSeats.setProjection((Projections.property("seats")));
				//Long dummy=new  Long(326);
				//CpmsSeats cpmsSeats	=(CpmsSeats) session.get(CpmsSeats.class,dummy);
	//System.out.println(cpmsSeats);
	//System.out.println( (ArrayList<CpmsSeats>) crSeats.list());

	//	searchArrayObj.setSeats(cpmsSeats.getSeats());
				System.out.println(((Integer) crSeats.list().get(0)));
				searchArrayObj.setSeats(((Integer) crSeats.list().get(0)));
				searchArrayObj.setCuid(cpmsUser.getCuid());
				searchArrayObj.setName(cpmsUser.getName());

//				ArrayList<CpmsRequestLogs> requestLogArray = (ArrayList<CpmsRequestLogs>) session.get(CpmsRequestLogs.class, cpmsRoutes.getRouteid());
//				if(requestLogArray != null)
//				{
//
//					int numberOfOtherGuys = requestLogArray.size();
//					for (int j=0;j<numberOfOtherGuys;j++)
//					{
//						CpmsRequestLogs cpmsRequestLogs = requestLogArray.get(i);
//						if(cpmsRequestLogs.getRequeststatus()==1)
//						{
//							CpmsUser cpmsUser1 = (CpmsUser) session.get(CpmsUser.class,cpmsRequestLogs.getRcid());
//							searchArrayObj.getOthers().add(cpmsUser1.getName());
//
//						}
//
//					}
//
//				}
//				else{
//					searchArrayObj.getOthers().add("Empty");
//				}
				searchArrayList.add(searchArrayObj);


			}
			tx.commit();
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}
		return searchArrayList;

	}


	public void addRequestToLog(String rcuid, String ocuid, String from,
			String to,int time,Long routeid,SessionFactory factory) {
		// TODO Auto-generated method stub
		int status=0;
		System.out.println("HibernateOps-addRequesttoLog");
		Session session = factory.openSession();
		Transaction tx = null;
		Long rcid=null;
		Long ocid=null;
		try {
			tx = session.beginTransaction();
			Criteria crUser = (Criteria)session.createCriteria(CpmsUser.class);
			crUser.add(Restrictions.like("cuid", rcuid));
			crUser.setProjection((Projections.property("cid")));
			rcid=(Long)crUser.list().get(0);
			Criteria crUser1 = (Criteria)session.createCriteria(CpmsUser.class);
			crUser1.add(Restrictions.like("cuid", ocuid));
			crUser1.setProjection((Projections.property("cid")));
			ocid=(Long)crUser1.list().get(0);
			/*public CpmsRequestLogs(Long rcid, Long ocid, int requeststatus,
					String source, String destination, int time) {*/
		CpmsRequestLogs	cpms_request_logs=new CpmsRequestLogs(rcid,ocid,status,from,to,time,routeid);
			session.save(cpms_request_logs);
			tx.commit();
		} catch (HibernateException e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}

		System.out.println("inserted successfully");
		
		
		
	}

	public ArrayList<CpmsRequestLogs> getDashBoardfromDB(Long cid,SessionFactory factory) {
		// TODO Auto-generated method stub
		
		
		System.out.println("HibernateOps-getDashboard");
		Session session = factory.openSession();
		Transaction tx = null;
		ArrayList<CpmsRequestLogs> crList=null;
		
		try {
			tx = session.beginTransaction();
			
			Criteria crRoutes = (Criteria)session.createCriteria(CpmsRoutes.class);
			Criteria crReq = (Criteria)session.createCriteria(CpmsRequestLogs.class);
			Criteria crReq1 = (Criteria)session.createCriteria(CpmsRequestLogs.class);
			Criteria crReq2 = (Criteria)session.createCriteria(CpmsRequestLogs.class);
/*if(	crRoutes.add(Restrictions.eq("cid",cid)) != null)
{      //........car owner........//
			System.out.println("in car owner  ");
			crReq.add(Restrictions.eq("ocid",cid));
			ArrayList<CpmsRequestLogs>	crList=(ArrayList<CpmsRequestLogs>)crReq.list();
			crReq1.add(Restrictions.eq("rcid",cid));
			ArrayList<CpmsRequestLogs>	crList1=(ArrayList<CpmsRequestLogs>)crReq1.list();
			
				
			return crList;
			
}
else
{ //......car availer....//
			System.out.println("in car availer");
crReq2.add(Restrictions.eq("rcid",cid));
ArrayList<CpmsRequestLogs>	crList=(ArrayList<CpmsRequestLogs>)crReq2.list();

return crList;
				
}*/

			crReq.add(Restrictions.eq("ocid",cid));
			 crList = (ArrayList<CpmsRequestLogs>)crReq.list();
			crReq1.add(Restrictions.eq("rcid",cid));
			ArrayList<CpmsRequestLogs>	crList1=(ArrayList<CpmsRequestLogs>)crReq1.list();
			crList.addAll(crList1);
			
		
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			session.close();
		}
		return crList;
		
		
	
	
		
	}





	public void addCpmsSeats(Routes routes, SessionFactory factory, Long cid) {
		// TODO Auto-generated method st
		System.out.println("HibernateOps-addCmpsSeats");
		Session session = factory.openSession();
		Transaction tx = null;

		try {
			tx = session.beginTransaction();
			
			CpmsSeats cpmsToSeats = new CpmsSeats(cid, routes.getToRouteId(), Integer.parseInt(routes.getToOfficeSeats()), 0);
			session.save(cpmsToSeats);
			
			CpmsSeats cpmsFromSeats = new CpmsSeats(cid, routes.getFromRouteId(), Integer.parseInt(routes.getFromOfficeSeats()), 1);
			session.save(cpmsFromSeats);
									
			tx.commit();
		} catch (HibernateException e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}

		System.out.println("seats inserted successfully");
	
	}

	public void grantCmpsRequest(String rcuid, String ocuid,
			Long routeid, SessionFactory factory) {
		// TODO Auto-generated method stub
		System.out.println("HibernateOps-grantCmpsRequest");
		Session session = factory.openSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			
			//Change the request status
			Long rcid = getCpmsCid(rcuid, factory);
			Long ocid = getCpmsCid(ocuid, factory);
			Criteria cr = (Criteria)session.createCriteria(CpmsRequestLogs.class);
			cr.add(Restrictions.eq("ocid", ocid)).add(Restrictions.eq("rcid", rcid)).add(Restrictions.eq("routeid", routeid));
			
			CpmsRequestLogs request = (CpmsRequestLogs)cr.list().get(0);
			request.setRequeststatus(1);
			session.save(request);
			
			//Change,dec the number of seats 
			Criteria crSeats = (Criteria)session.createCriteria(CpmsSeats.class);
			crSeats.add(Restrictions.eq("routeid", routeid));
			CpmsSeats seats = (CpmsSeats)crSeats.list().get(0);
			int nofseats = seats.getSeats();
			nofseats--;
			seats.setSeats(nofseats);
			session.save(seats);
			
			tx.commit();
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			session.close();
		}
		
	}

	public void declineCpmsRequest(String rcuid, String ocuid,
			Long routeid,SessionFactory factory) {
		// TODO Auto-generated method stub
		System.out.println("HibernateOps-decineCmpsRequest");
		Session session = factory.openSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			//Change the request status
			Long rcid = getCpmsCid(rcuid, factory);
			Long ocid = getCpmsCid(ocuid, factory);
			Criteria cr = (Criteria)session.createCriteria(CpmsRequestLogs.class);
			cr.add(Restrictions.eq("ocid", ocid)).add(Restrictions.eq("rcid", rcid)).add(Restrictions.eq("routeid", routeid));
			
			CpmsRequestLogs request = (CpmsRequestLogs)cr.list().get(0);
			request.setRequeststatus(2);
			session.save(request);
	
			//Change,dec the number of seats 
			Criteria crSeats = (Criteria)session.createCriteria(CpmsSeats.class);
			crSeats.add(Restrictions.eq("routeid", routeid));
			CpmsSeats seats = (CpmsSeats)crSeats.list().get(0);
			int nofseats = seats.getSeats();
			nofseats--;
			seats.setSeats(nofseats);
			session.save(seats);
	
			
			tx.commit();
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			session.close();
		}
		
	}



	public Long getCpmsCid(String cuid,SessionFactory factory)
	{
		Session session = factory.openSession();
		Transaction tx = null;
		Long cid = new Long(0);
		try {
			tx = session.beginTransaction();
			Criteria cr = (Criteria)session.createCriteria(CpmsUser.class);
			cr.add(Restrictions.like("cuid", cuid));
			cid = (Long)cr.list().get(0);
			tx.commit();
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			session.close();
		}
		return cid;
	}
	
	public String getCpmsCuid(Long cid,SessionFactory factory)
	{
		Session session = factory.openSession();
		Transaction tx = null;
		String cuid = null;
		try {
			tx = session.beginTransaction();
			CpmsUser user =  (CpmsUser)session.get(CpmsUser.class,cid);
			
			cuid = user.getCuid();
			tx.commit();
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			session.close();
		}
		return cuid;
	}


}

	//	public static void main(String[] args) {
	//		HibernateConnection.createConnection();
	//		HibernateOps hb = new HibernateOps();
	//		hb.fillCpmsTransitList(0, HibernateConnection.getFactory());
	//	}


